import{_ as o,c as a,a as t,o as s}from"./index-8Nlstc5Z.js";const r={},i={class:"about__wrapper max-h-full overflow-auto pr-4"};function n(l,e){return s(),a("div",i,e[0]||(e[0]=[t('<p data-v-63229d38> This program is an elementary elevator control system. The focus is only on moving and tracking elevators in a building - real world concerns like weight limits, fire control, overrides, holds, etc., are beyond the scope of the program. </p><p data-v-63229d38>Parameters for the program:</p><ul class="list-disc" data-v-63229d38><li class="ml-4" data-v-63229d38>the building has 10 floors</li><li class="ml-4" data-v-63229d38>there are four elevators</li><li class="ml-4" data-v-63229d38>it takes 10 seconds for an elevator car to move from one floor to the next</li><li class="ml-4" data-v-63229d38>when a car stops on a floor, it takes 10 seconds for passengers to enter / leave and then the car is ready to move again</li></ul><p data-v-63229d38> This program generates random calls for the elevator on floors throughout the building. The elevator cars will move to pick up passengers and disembark them. The algorithm is simple and naive, but in general, an &quot;up&quot; elevator should keep going up until it has no more passengers and the same for a &quot;down&quot; elevator - an elevator doesn&#39;t yo-yo up and down between floors while still containing passengers. There is an optimized algorithm in that could pick up requests along the direction of the elevators movement. The program also indicates the relative position of the elevator cars (car 1 is on floor 3, car 2 is on floor 10) and user actions (&quot;down&quot; request on floor 4 received, &quot;up&quot; request on floor 7 received); a simple console logging can be seen in the simulation section. </p><p data-v-63229d38> This is a simple programming exercise. This was made using Vue 3, TypeScript, and Tailwind CSS. </p>',5)]))}const c=o(r,[["render",n],["__scopeId","data-v-63229d38"]]);export{c as default};
